---
kind: pipeline
type: vm
name: k8s-monitor

clone:
  depth: 1

environment:
  DOCKER_HOST: tcp://docker-in-docker:2375
  DOCKER_CLI_EXPERIMENTAL: enabled

steps:
  - name: wait-for-k3d
    image: supporttools/kube-builder:latest
    commands:
      - export KUBECONFIG=ci/kubeconfig.yaml
      - until -f ci/kubeconfig.yaml; do sleep 1s; done # wait for k3d to be ready before proceeding
      - until kubectl get nodes 2>&1 > /dev/null; do sleep 1s; done # wait for k3d to be ready before proceeding
      - echo "k3d is ready"

  - name: docker-dry-run
    image: cube8021/docker-buildx:20.10.14-0.8.2
    commands:
    - docker login -u local-registry -p local-registry registry:5000
    - sh ./docker-build.sh

  - name: docker-build
    image: thegeeklab/drone-docker-buildx:20.13.6
    settings:
      repo: supporttools/probe-a-node
      tags:
      - latest
      - ${DRONE_BUILD_NUMBER}
      username:
        from_secret: docker-username
      password:
        from_secret: docker-password
      dockerfile: Dockerfile
      context: .
      platforms:
        - linux/amd64
        - linux/arm64
      auto_tag: false
      auto_tag_suffix: latest
    when:
      event:
      - promote
      - deployment
  
  - name: deploy-to-k3d
    image: supporttools/kube-builder:latest
    commands:
      - export KUBECONFIG=ci/kubeconfig.yaml
      - kubectl get pods --all-namespaces
      - kubectl get nodes

services:
  - name: registry
    image: registry:2
    privileged: true 
    command:
      - /entrypoint.sh htpasswd -Bbn local-registry local-registry > /auth/htpasswd
      - /entrypoint.sh -v /auth:/auth -e REGISTRY_AUTH=htpasswd -e REGISTRY_AUTH_HTPASSWD_REALM="Registry Realm" -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd -p 5000:5000 registry:2

  - name: k3dsvc
    image: rancher/k3d:5.0.0-rc.4-dind
    privileged: true    
    commands:
      - rm -f ci/kubeconfig.yaml
      - nohup dockerd-entrypoint.sh & # start docker in the background
      - until docker ps 2>&1 > /dev/null; do sleep 1s; done # wait for docker to be ready before proceeding
      - k3d cluster create --config ci/k3d-drone.yaml --api-port k3dsvc:6445
      - until kubectl get deployment coredns -n kube-system -o go-template='{{.status.availableReplicas}}' | grep -v -e '<no value>'; do sleep 1s; done # wait for coredns to be up and running
      - k3d kubeconfig get drone > ci/kubeconfig.yaml
      - tail -f /dev/null # chill around while the steps do their work
  
